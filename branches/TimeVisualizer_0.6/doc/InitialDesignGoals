
= Design goals =

I found [http://trac-hacks.org/wiki/ScrumBurndownPlugin ScrumBurndownPlugin] very interesting. Basically it makes possible to plan & Trac sprints in SW projects. However, i run to many problems in evaluation and could not have suggested it as useful tool in our company. Trac itself is very good tool and burn down support would be great advantage.

So the only solution was to start learning Python (okay, I had coded with it seven years ago for 4 months so I had some basic knowledge) and see if I could improve the plugin. I managed to make some interesting workarounds but the solution was not enough pleasant for me to be suggested as a tool for our company.

So I started to find out other alternatives to implement the behavior. First of all I found that db already has the needed ticket history so basically the graph could be provided on the fly from the existing data. Then I thought that it would be great to use SVG to present the data - it scales to the screen so it would be no problem, if the time frame would be 10 minutes or 1 year. These were the original design goals, so I put my fingers writing some ugly python code and test how it works. And here we are - finally - with published plugin :)

[http://trac-hacks.org/wiki/ScrumBurndownPlugin ScrumBurndownPlugin] disadvantages & my solutions are discussed below: (create a ticket, if I have not been objective or if there is something missing)

 * burn down created with javascript doesn't scale well to the page =>

 My implementation uses SVG - it can be made pretty and it scales well - I've even tested iframe having size 8000x3000 pixels and my Firefox renders the graph extremely well and I can see the details from the graph (okay, quite extreme use case)

 * burn down image comes crazy if there is no data or i have forgotten something (start miletone, ...) - usually i just get no graph and have crazy numbers =>

 My implementation creates graphs from the existing database schema, so there is no need to start milestone or even have my plugin installed untill afterwards to get the graphs out. Someone could think that it is minor disadvantage is that user needs to specify start and end dates for the renderer - or one may specify milestone as filter - then graph renders activity from the first ticket assigned to the ticket to the last activity in the milestone.

 3. plugin modifies Trac database and thus may cause problems when upgrading =>
 
 My plugin doesn't change db, just reads it, so it won't cause any problems.
 
 4. burn down can show changes only at at day or week scale =>
 
 My plugin renders each change separately and timescale is one second! For scrum people, I added vertical rows to the image to show time interval (one day by default but can be overridden in query string to anything - e.g. hours or weeks). Only thing to look after is to carefully change estimated and used hours in tickets (otherwise graph gets a lot of details which might not be good - for performance & graph readability)
 
 5. if plugin has not been active or user has made some mistakes (in config, ...) some data might have been lost =>
 
 My plugin renders data from existing data, so there is no need to worry anything like this. 
 
 6. implementation requires tickets to be assigned to components. If all components are removed and tickets are not bound to any component, no graph is seen (actually i modified the plugin to support tickets bound to NULL component but that was quite ugly hack) =>

 My plugin doesn't need any specifics from tickets - they may be tied to milestones, components or then not. Renderer takes filters and if omitted, then milestone and component binding is ignored. Any combination can be used in filtering - and on the fly!

There were many many other things but I think the above were the most important ones.
